"use strict";angular.module("BfcApp").controller("FormThreeCtrl",["$scope","$state","$stateParams","toaster","FormService","$filter","$http","underscore","QuestionService","UserService","CommentService",function(e,t,n,s,a,o,i,u,r,d,c){function m(){d.Index(1,!0).then(function(t){var s=[];angular.forEach(t.data,function(e,t){s.push(e.name)}),a.Show(n.form_id).then(function(t){function n(e){var n=u.find(t.data.questions,function(t){return t.position==e});return"undefined"!=typeof n&&(n.check=!0),n}if(e.questions=[],e.save=function(t){r.Update(e.questions[t].id,JSON.stringify(e.questions[t].data)).then(function(e){console.log(e)})},e.questions[1]=n(1),e.questions[1]){u.isEmpty(e.questions[1].data)?e.questions[1].data=[["Bank name",t.data.name],["Completed by (name and title)",""],["Completed on (day/month/year)",""]]:e.questions[1].data=JSON.parse(e.questions[1].data);var a,o=document.getElementById("question_1");a=new Handsontable(o,{data:e.questions[1].data,columns:[{type:"text",readOnly:!0},{type:"text"}],cells:function(e,t){var n;return 1===e&&1===t?n={type:"dropdown",source:s}:2===e&&1===t?n={type:"date"}:void 0}})}if(e.questions[2]=n(2),e.questions[2]){u.isEmpty(e.questions[2].data)?e.questions[2].data=[["","Forecast for FinancialYear __/__/20__","Financial Period up to __/__/20__","Financial Year20__","Financial Year20__","Financial Year20__"],["L/Cs","","","",""],["Documentary collections","","","","",""],["Open account","","","","",""],["Guarantees","","","","",""],["Import loans","","","","",""],["Pre-payments","","","","",""],["Other","","","","",""],["Total Imports Supported","=SUM(B2:B8)","=SUM(C2:C8)","=SUM(D2:D8)","=SUM(E2:E8)","=SUM(F2:F8)"],["L/Cs","","","",""],["Documentary collections","","","","",""],["Open account","","","","",""],["Pre/post shipment finance","","","","",""],["Pre-payments","","","","",""],["Other","","","","",""],["Total Exports Supported","=SUM(B10:B15)","=SUM(C10:C15)","=SUM(D10:D15)","=SUM(E10:E15)","=SUM(F10:F15)"]]:e.questions[2].data=JSON.parse(e.questions[2].data);var i,d=document.getElementById("question_2");i=new Handsontable(d,{data:e.questions[2].data,formulas:!0})}if(e.questions[3]=n(3),e.questions[3]){u.isEmpty(e.questions[3].data)?e.questions[3].data=[["","Forecast for20__","Period up to__/__/20__","Year20__","Year20__","Year20__"],["Number of import LCs issued (#)","","","","",""],["Total value of import LCs issued (USD million)","","","","",""],["% of the value of import LCs issued that were confirmed by other banks","","","","",""]]:e.questions[3].data=JSON.parse(e.questions[3].data);var c,m=document.getElementById("question_3");c=new Handsontable(m,{data:e.questions[3].data})}if(e.questions[4]=n(4),e.questions[4]){u.isEmpty(e.questions[4].data)?e.questions[4].data=[["","Average","Maximum"],["Validity period (days)","",""],["Payment terms (days)","",""]]:e.questions[4].data=JSON.parse(e.questions[4].data);var p,l=document.getElementById("question_4");p=new Handsontable(l,{data:e.questions[4].data})}if(e.questions[5]=n(5),e.questions[5]){u.isEmpty(e.questions[5].data)?e.questions[5].data=[["#","Correspondent Bank Name","Current Credit Limit","(indicate currency)","Tenor in months","Utilization Rate (%)"],["1","","","","",""],["2","","","","",""],["3","","","","",""],["4","","","","",""],["5","","","","",""]]:e.questions[5].data=JSON.parse(e.questions[5].data);var q,f=document.getElementById("question_5");q=new Handsontable(f,{data:e.questions[5].data,columns:[{type:"text",readOnly:!0},{type:"text"},{type:"text"},{type:"dropdown",source:["USD","EUR","RUB","UHA"]},{type:"text"},{type:"text"}],cells:function(e,t){var n;if(0===e&&2===t)return n={type:"text"}}})}if(e.questions[6]=n(6),e.questions[6]){u.isEmpty(e.questions[6].data)?e.questions[6].data=[["#","Correspondent Bank Name","Current Credit Limit","(indicate currency)","Tenor in months","Utilization Rate (%)"],["1","","","","",""],["2","","","","",""],["3","","","","",""],["4","","","","",""],["5","","","","",""]]:e.questions[6].data=JSON.parse(e.questions[6].data);var _,y=document.getElementById("question_6");_=new Handsontable(y,{data:e.questions[6].data,columns:[{type:"text",readOnly:!0},{type:"text"},{type:"text"},{type:"dropdown",source:["USD","EUR","RUB","UHA"]},{type:"text"},{type:"text"}],cells:function(e,t){var n;if(0===e&&2===t)return n={type:"text"}}})}if(e.questions[7]=n(7),e.questions[7]){u.isEmpty(e.questions[7].data)?e.questions[7].data=[["","Year 20__","Year 20__"],["Interest income from Trade Finance","",""],["Fee/commission income from Trade Finance","",""]]:e.questions[7].data=JSON.parse(e.questions[7].data);var S,g=document.getElementById("question_7");S=new Handsontable(g,{data:e.questions[7].data})}if(e.questions[8]=n(8),e.questions[8]){u.isEmpty(e.questions[8].data)?e.questions[8].data=[["","Year 20__"],["Market share (%)",""],["Ranking (#)",""]]:e.questions[8].data=JSON.parse(e.questions[8].data);var h,E=document.getElementById("question_8");h=new Handsontable(E,{data:e.questions[8].data})}if(e.questions[9]=n(9),e.questions[9]){u.isEmpty(e.questions[9].data)?e.questions[9].data=[["IMPORTS SUPPORTED","","EXPORTS SUPPORTED",""],["Country","Main Goods Imported","Country","Main Goods Exported"],["","","",""],["","","",""]]:e.questions[9].data=JSON.parse(e.questions[9].data);var v,C=document.getElementById("question_9");v=new Handsontable(C,{data:e.questions[9].data,mergeCells:[{row:0,col:0,rowspan:1,colspan:2},{row:0,col:2,rowspan:1,colspan:2}],cells:function(e,t){var n;if(2===e&&0===t||3===e&&0===t||2===e&&2===t||3===e&&2===t)return n={type:"dropdown",source:["Ukraine","Germany"]}}})}if(e.questions[10]=n(10),e.questions[10]&&(u.isEmpty(e.questions[10].data)?e.questions[10].data={check:"",comment:""}:e.questions[10].data=JSON.parse(e.questions[10].data)),e.questions[11]=n(11),e.questions[11]&&(u.isEmpty(e.questions[11].data)?e.questions[11].data={check:"",comment:""}:e.questions[11].data=JSON.parse(e.questions[11].data)),e.questions[12]=n(12),e.questions[12]){u.isEmpty(e.questions[12].data)?e.questions[12].data=[["Name","Years of exp in trade finance","Certificates or training","","Name","Years of exp in trade finance","Certificates or training"],["","","","","","",""],["","","","","","",""]]:e.questions[12].data=JSON.parse(e.questions[12].data);var U,w=document.getElementById("question_12");U=new Handsontable(w,{data:e.questions[12].data,mergeCells:[{row:0,col:3,rowspan:3,colspan:1}]})}if(e.questions[13]=n(13),e.questions[13]){u.isEmpty(e.questions[13].data)?e.questions[13].data=[["Name","Years of exp in trade finance","Certificates or training","","Name","Years of exp in trade finance","Certificates or training"],["","","","","","",""],["","","","","","",""]]:e.questions[13].data=JSON.parse(e.questions[13].data);var O,x=document.getElementById("question_13");O=new Handsontable(x,{data:e.questions[13].data,mergeCells:[{row:0,col:3,rowspan:3,colspan:1}]})}})})}m(),e.users=[],e.storeAssign=function(){var t=[];angular.forEach(e.questions,function(e,n){e&&e.check&&t.push(e.id)}),d.StoreAssign({data:t,users:function(){var t=[];return angular.forEach(e.users,function(e,n){t.push({email:e.text})}),t}()},n.company_id,n.form_id).then(function(e){e.success?s.pop("success","Success!",""):angular.forEach(e.error,function(e){angular.forEach(e,function(e){s.pop("error","",e)})})})},e.assignToBcp=function(){var t=[];angular.forEach(e.questions,function(e,n){e.check&&t.push(e.id)}),d.StoreQuestionsToBcp(n.company_id,n.form_id,t).then(function(e){e.success&&s.pop("success","Success!","")})},e.selected_question={},e.getQuestionUsers=function(t){e.tmp_question_id=t,r.Users(t).then(function(t){e.selected_question.users=t.data})},e.unassignUser=function(t){r.Detach(e.tmp_question_id,t).then(function(t){t.success&&(s.pop("success","Success!",""),e.getQuestionUsers(e.tmp_question_id))})},e.visibleReplyForm=!1;var p=angular.element(document.querySelector("#global_add_comments_form"));e.showReplyForm=function(t,n){console.log(t,n),e.temp_comment_id=t,e.temp_comment_index=n;var s=angular.element(document.querySelector("#tmp_add_comments_form"+t));s.append(p),e.visibleReplyForm=!e.visibleReplyForm},e.comments=[],e.getAllComments=function(t){e.tmp_question_id=t,c.GetToQuestion(t).then(function(t){e.comments=t})},e.new_comment="",e.comment_tmp_reply="",e.storeComment=function(t,n){var a={comment:e.new_comment,question_id:e.tmp_question_id};"undefined"!=typeof t&&(a.comment=e.comment_tmp_reply,a.reply=1,a.reply_to=t),c.Store(a).then(function(t){t.success?(s.pop("success","Success!",""),e.new_comment="","undefined"==typeof n&&e.getAllComments(e.tmp_question_id),e.visibleReplyForm=!1,e.comment_tmp_reply=""):angular.forEach(t.error,function(e){angular.forEach(e,function(e){s.pop("error","",e)})})})},e.approveQuestion=function(e){r.Approve(e).then(function(e){e&&(s.pop("success","Success!",""),t.reload())})},e.disapproveQuestion=function(e){r.Disapprove(e).then(function(e){e&&(s.pop("success","Success!",""),t.reload())})}}]);
//# sourceMappingURL=data:application/json;base64,
