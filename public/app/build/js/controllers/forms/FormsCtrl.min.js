"use strict";angular.module("BfcApp").controller("FormsCtrl",["$scope","$rootScope","$stateParams","toaster","FormService","CompanyService","UserService","QuestionService","underscore","$state",function(o,e,s,n,r,c,i,a,t,p){function m(){r.ProgressBar(p.params.form_id).then(function(e){o.progress_bar=e})}c.Show(s.company_id).then(function(e){o.company=e.data}),c.GetCompaniesUsers(s.company_id).then(function(e){o.users=e}),o.company_id=s.company_id,r.Index(s.company_id).then(function(n){o.forms=n.data,"user"==e.CURRENT_USER.user_role||"bcp"==e.CURRENT_USER.user_role?p.go("forms.view_"+o.forms[0].position,{company_id:s.company_id,form_id:o.forms[0].id}):p.go("forms.view_1",{company_id:s.company_id,form_id:o.forms[0].id})}),o.dispatchToUsersPreview=function(e){i.DispatchPreview(e,s.company_id).then(function(e){e.success&&(o.dispatch_users=e.data)})},o.dispatchToUsers=function(o){i.Dispatch(o,s.company_id).then(function(o){o.success&&n.pop("success","Mail Notification sent successfully!","")})},o.$watchCollection(function(){return p.params},function(){"undefined"!=typeof p.params.form_id&&m()}),o.approveForm=function(){r.Approve(p.params.form_id).then(function(o){o.success&&(n.pop("success","Your answers have been saved!",""),p.reload())})}}]);
//# sourceMappingURL=data:application/json;base64,
