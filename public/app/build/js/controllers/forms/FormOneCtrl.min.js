"use strict";angular.module("BfcApp").controller("FormOneCtrl",["$scope","$state","$rootScope","$stateParams","toaster","FormService","$filter","$http","underscore","QuestionService","UserService","CommentService",function(e,t,n,s,o,a,i,u,r,c,d,l){function _(){a.Show(s.form_id).then(function(t){function n(e){var n=r.find(t.data.questions,function(t){return t.position==e});return"undefined"!=typeof n&&(n.check=!0),n}if(e.q_data=[],e.save=function(t){c.Update(e.questions[t].id,JSON.stringify(e.questions[t].data)).then(function(e){o.pop("success","Success!","")})},e.questions=[],e.questions[1]=n(1),e.questions[1]){r.isEmpty(e.questions[1].data)?e.questions[1].data=[["Currency",""],["Current unit",""],["Bank only of consolidated",""]]:e.questions[1].data=JSON.parse(e.questions[1].data);var s,a=document.getElementById("question_1");s=new Handsontable(a,{data:e.questions[1].data,cells:function(e,t){var n;return 1===e&&1===t?n={type:"dropdown",source:["Unit","thousand","million"]}:2===e&&1===t?n={type:"dropdown",source:["Bank Only","Consolidated"]}:void 0}})}if(e.questions[2]=n(2),e.questions[2]&&(r.isEmpty(e.questions[2].data)?e.questions[2].data={check_1:"",check_2:"",check_3:"",check_4:""}:e.questions[2].data=JSON.parse(e.questions[2].data)),e.questions[3]=n(3),e.questions[3]){r.isEmpty(e.questions[3].data)?e.questions[3].data=[["","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Principal or interest is 90 days or more past due","","","",""],["The bank has placed the exposure in non-accural status","","","",""],["Restructured within the last 12 months","","","",""],["Full repayment is doubtful even if current or less than 90 days past due","","","",""],["Total NPL","","","",""],["","","","",""],["Gross loans","","","",""],["ADB NPL ratio","","","",""],["","","","",""],["ADB NPL ratio covenant","","","",""]]:e.questions[3].data=JSON.parse(e.questions[3].data);var i,u=document.getElementById("question_3");i=new Handsontable(u,{data:e.questions[3].data})}if(e.questions[4]=n(4),e.questions[4]){r.isEmpty(e.questions[4].data)?e.questions[4].data=[["Non accural loans","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Non-accrual loans that are current or <90 days past due","","","",""],["Non-accrual loans that are >90 days","","","",""],["Total Non-accrual Loans "," -   "," -   "," -   "," -   "],["","","","",""],["Non accural loans","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Non-accrual loans that are current or <90 days past due","","","",""],["Non-accrual loans that are >90 days","","","",""],["Total Non-accrual Loans "," -   "," -   "," -   "," -   "],["","","","",""],["Restructured loans","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Loans restructured within the past 12 months (outstanding balance amount only)","","","",""],["Loans restructured within the past 12 months (outstanding balance amount only), not including any loans already included in 1, or 2 ","","","",""],["","","","",""],["Full repayment is doubftul","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Other loans for which full repayment is doubtful (do not include loans already included in 1, 2 or 3)","","","",""]]:e.questions[4].data=JSON.parse(e.questions[4].data);var d,l=document.getElementById("question_4");d=new Handsontable(l,{data:e.questions[4].data})}if(e.questions[5]=n(5),e.questions[5]){r.isEmpty(e.questions[5].data)?e.questions[5].data={1:[["","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Funded Exposure to Top 20 ","","","",""],["Unfunded Exposure to Top 20 ","","","",""],["Single Largest Funded and Unfunded Exposure","","","",""]],2:[["","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Regulatory NPL ratio per the central bank definition","","","",""]],3:[["","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["Tier 1, capital","","","",""],["Deductions","","","",""],["Tier 2, capital","","","",""],["Deductions","","","",""],["Total Capital"," -   "," -   "," -   "," -   "],["Total Risk Weighted Assets","","","",""],["Tier 1 ratio (%)","","","",""],["Total CAR ratio (%)","","","",""],["Basis of calculation (Basel I, Basel II, local standards)","","","",""]],4:[["","__/__/20__","12/31/2015","12/31/2014","12/31/2013"],["A. Total On-balance sheet FX Assets ","","","",""],["B. Total Off-balance sheet FX Assets (e.g. FX forward purchases)","","","",""],["Total Gross FX Long Position (A+B)"," -   "," -   "," -   "," -   "],["C. Total On-balance sheet FX Liabilities","","","",""],["D. Total Off-balance sheet FX Liabilities (e.g. FX forward sales)","","","",""],["Total Gross FX Short Position (C+D)"," -   "," -   "," -   "," -   "],["Net Open Position: On-Balance (A-C)"," -   "," -   "," -   "," -   "],["Net Open Position: On and Off-Balance ((A+B)-(C+D))"," -   "," -   "," -   "," -   "]]}:e.questions[5].data=JSON.parse(e.questions[5].data);var _,p=document.getElementById("question_5_1");_=new Handsontable(p,{data:e.questions[5].data[1]});var m,f=document.getElementById("question_5_2");m=new Handsontable(f,{data:e.questions[5].data[2]});var q,h=document.getElementById("question_5_3");q=new Handsontable(h,{data:e.questions[5].data[3]});var y,g=document.getElementById("question_5_4");y=new Handsontable(g,{data:e.questions[5].data[4]})}})}_(),e.users=[],e.storeAssign=function(){var t=[];angular.forEach(e.questions,function(e,n){e&&e.check&&t.push(e.id)}),d.StoreAssign({data:t,users:function(){var t=[];return angular.forEach(e.users,function(e,n){t.push({email:e.text})}),t}()},s.company_id,s.form_id).then(function(e){e.success?o.pop("success","Success!",""):angular.forEach(e.error,function(e){angular.forEach(e,function(e){o.pop("error","",e)})})})},e.assignToBcp=function(){var t=[];angular.forEach(e.questions,function(e,n){e.check&&t.push(e.id)}),d.StoreQuestionsToBcp(s.company_id,s.form_id,t).then(function(e){e.success&&o.pop("success","Success!","")})},e.selected_question={},e.getQuestionUsers=function(t){e.tmp_question_id=t,c.Users(t).then(function(t){e.selected_question.users=t.data})},e.unassignUser=function(t){c.Detach(e.tmp_question_id,t).then(function(t){t.success&&(o.pop("success","Success!",""),e.getQuestionUsers(e.tmp_question_id))})},e.visibleReplyForm=!1;var p=angular.element(document.querySelector("#global_add_comments_form"));e.showReplyForm=function(t,n){console.log(t,n),e.temp_comment_id=t,e.temp_comment_index=n;var s=angular.element(document.querySelector("#tmp_add_comments_form"+t));s.append(p),e.visibleReplyForm=!e.visibleReplyForm},e.comments=[],e.getAllComments=function(t){e.tmp_question_id=t,l.GetToQuestion(t).then(function(t){e.comments=t})},e.new_comment="",e.comment_tmp_reply="",e.storeComment=function(t,n){var s={comment:e.new_comment,question_id:e.tmp_question_id};"undefined"!=typeof t&&(s.comment=e.comment_tmp_reply,s.reply=1,s.reply_to=t),l.Store(s).then(function(t){t.success?(o.pop("success","Success!",""),e.new_comment="","undefined"==typeof n&&e.getAllComments(e.tmp_question_id),e.visibleReplyForm=!1,e.comment_tmp_reply=""):angular.forEach(t.error,function(e){angular.forEach(e,function(e){o.pop("error","",e)})})})},e.approveQuestion=function(e){c.Approve(e).then(function(e){e&&(o.pop("success","Success!",""),t.reload())})},e.disapproveQuestion=function(e){c.Disapprove(e).then(function(e){e&&(o.pop("success","Success!",""),t.reload())})}}]);
//# sourceMappingURL=data:application/json;base64,
