"use strict";angular.module("BfcApp").controller("FormFourCtrl",["$scope","$state","$stateParams","toaster","FormService","$filter","$http","underscore","QuestionService","UserService","CommentService",function(e,n,t,o,s,c,u,i,r,a,p){function m(){s.Show(t.form_id).then(function(n){function t(e){var t=i.find(n.data.questions,function(n){return n.position==e});return"undefined"!=typeof t&&(t.check=!0),t}if(e.questions=[],e.save=function(n){r.Update(e.questions[n].id,JSON.stringify(e.questions[n].data)).then(function(e){o.pop("success","Success!","")})},e.questions[1]=t(1),e.questions[1]){i.isEmpty(e.questions[1].data)?e.questions[1].data=[["Indicator [prudential acronym]","Requirement","Actual value 1","Complied (Y/N)","If not complied, please provide details 2"],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""],["","","","","",""]]:e.questions[1].data=JSON.parse(e.questions[1].data);var s,c=document.getElementById("question_1");s=new Handsontable(c,{data:e.questions[1].data,columns:[{},{},{},{type:"dropdown",source:["yes","no"]},{}],cells:function(e,n){var t;if(0===e&&3===n)return t={type:"text"}}})}})}m(),e.users=[],e.storeAssign=function(){var n=[];angular.forEach(e.questions,function(e,t){e&&e.check&&n.push(e.id)}),a.StoreAssign({data:n,users:function(){var n=[];return angular.forEach(e.users,function(e,t){n.push({email:e.text})}),n}()},t.company_id,t.form_id).then(function(e){o.pop("success","Success!","")})},e.assignToBcp=function(){var n=[];angular.forEach(e.questions,function(e,t){e.check&&n.push(e.id)}),a.StoreQuestionsToBcp(t.company_id,t.form_id,n).then(function(e){o.pop("success","Success!","")})},e.users=[],e.storeAssign=function(){var n=[];angular.forEach(e.questions,function(e,t){e&&e.check&&n.push(e.id)}),a.StoreAssign({data:n,users:function(){var n=[];return angular.forEach(e.users,function(e,t){n.push({email:e.text})}),n}()},t.company_id,t.form_id).then(function(e){e.success?o.pop("success","Success!",""):angular.forEach(e.error,function(e){angular.forEach(e,function(e){o.pop("error","",e)})})})},e.assignToBcp=function(){var n=[];angular.forEach(e.questions,function(e,t){e.check&&n.push(e.id)}),a.StoreQuestionsToBcp(t.company_id,t.form_id,n).then(function(e){e.success&&o.pop("success","Success!","")})},e.selected_question={},e.getQuestionUsers=function(n){e.tmp_question_id=n,r.Users(n).then(function(n){e.selected_question.users=n.data})},e.unassignUser=function(n){r.Detach(e.tmp_question_id,n).then(function(n){n.success&&(o.pop("success","Success!",""),e.getQuestionUsers(e.tmp_question_id))})},e.visibleReplyForm=!1;var f=angular.element(document.querySelector("#global_add_comments_form"));e.showReplyForm=function(n,t){console.log(n,t),e.temp_comment_id=n,e.temp_comment_index=t;var o=angular.element(document.querySelector("#tmp_add_comments_form"+n));o.append(f),e.visibleReplyForm=!e.visibleReplyForm},e.comments=[],e.getAllComments=function(n){e.tmp_question_id=n,p.GetToQuestion(n).then(function(n){e.comments=n})},e.new_comment="",e.comment_tmp_reply="",e.storeComment=function(n,t){var s={comment:e.new_comment,question_id:e.tmp_question_id};"undefined"!=typeof n&&(s.comment=e.comment_tmp_reply,s.reply=1,s.reply_to=n),p.Store(s).then(function(n){n.success?(o.pop("success","Success!",""),e.new_comment="","undefined"==typeof t&&e.getAllComments(e.tmp_question_id),e.visibleReplyForm=!1,e.comment_tmp_reply=""):angular.forEach(n.error,function(e){angular.forEach(e,function(e){o.pop("error","",e)})})})},e.approveQuestion=function(e){r.Approve(e).then(function(e){e&&(o.pop("success","Success!",""),n.reload())})},e.disapproveQuestion=function(e){r.Disapprove(e).then(function(e){e&&(o.pop("success","Success!",""),n.reload())})}}]);
//# sourceMappingURL=data:application/json;base64,
